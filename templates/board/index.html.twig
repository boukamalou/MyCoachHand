{% extends 'base2.html.twig' %}

{% block title %}Hello BoardController!{% endblock %}

{% block body %}

{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.3/pixi.min.js"></script>
    <script>
        let type = "WebGL"
        if(!PIXI.utils.isWebGLSupported()){
            type = "canvas"
        }

        PIXI.utils.sayHello(type)
        var renderer = PIXI.autoDetectRenderer(800, 600);
        document.body.appendChild(renderer.view);

        // create the root of the scene graph
        var stage = new PIXI.Container();

        // create a texture from an image path

        var texture = PIXI.Texture.fromImage('./passeur.png');
        var textureAdv = PIXI.Texture.fromImage('./adversaire.png');
        var textureTerrain = PIXI.Texture.fromImage('./terrain.jpg');
        var terrain = new PIXI.Sprite(textureTerrain);
        terrain.interactive = false;
        terrain.position.x = 0;
        terrain.position.y = 25;
        terrain.scale.set(1.6);
        stage.addChild(terrain);

        var textureBallon = PIXI.Texture.fromImage('./balle.png');
        var ballon = new PIXI.Sprite(textureBallon);
        ballon.interactive = true;
        ballon.position.x = 400;
        ballon.position.y = 250;
        ballon.scale.set(.07);
        stage.addChild(ballon);

        ballon
            // events for drag start
            .on('mousedown', onDragStart)
            .on('touchstart', onDragStart)
            // events for drag end
            .on('mouseup', onDragEnd)
            .on('mouseupoutside', onDragEnd)
            .on('touchend', onDragEnd)
            .on('touchendoutside', onDragEnd)
            // events for drag move
            .on('mousemove', onDragMove)
            .on('touchmove', onDragMove);



        for (var i = 0; i < 6; i++)
        {
            createBunny((150 +  20 * i) , (150 + 10 * i));
            createAdversaire((150 +  20 * i) , (350 + 10 * i));
        }

        function createAdversaire(x, y){
            // create our little bunny friend..
            var adv = new PIXI.Sprite(textureAdv);

            // enable the bunny to be interactive... this will allow it to respond to mouse and touch events
            adv.interactive = true;

            // this button mode will mean the hand cursor appears when you roll over the bunny with your mouse
            adv.buttonMode = true;

            // center the bunny's anchor point
            adv.anchor.set(0.5);

            // make it a bit bigger, so it's easier to grab
            adv.scale.set(2);

            // setup events
            adv
                // events for drag start
                .on('mousedown', onDragStart)
                .on('touchstart', onDragStart)
                // events for drag end
                .on('mouseup', onDragEnd)
                .on('mouseupoutside', onDragEnd)
                .on('touchend', onDragEnd)
                .on('touchendoutside', onDragEnd)
                // events for drag move
                .on('mousemove', onDragMove)
                .on('touchmove', onDragMove);

            // move the sprite to its designated position
            adv.position.x = x;
            adv.position.y = y;

            // add it to the stage
            stage.addChild(adv);
        }

        function createBunny(x, y)
        {
            // create our little bunny friend..
            var bunny = new PIXI.Sprite(texture);

            // enable the bunny to be interactive... this will allow it to respond to mouse and touch events
            bunny.interactive = true;

            // this button mode will mean the hand cursor appears when you roll over the bunny with your mouse
            bunny.buttonMode = true;

            // center the bunny's anchor point
            bunny.anchor.set(0.5);

            // make it a bit bigger, so it's easier to grab
            bunny.scale.set(2);

            // setup events
            bunny
                // events for drag start
                .on('mousedown', onDragStart)
                .on('touchstart', onDragStart)
                // events for drag end
                .on('mouseup', onDragEnd)
                .on('mouseupoutside', onDragEnd)
                .on('touchend', onDragEnd)
                .on('touchendoutside', onDragEnd)
                // events for drag move
                .on('mousemove', onDragMove)
                .on('touchmove', onDragMove);

            // move the sprite to its designated position
            bunny.position.x = x;
            bunny.position.y = y;

            // add it to the stage
            stage.addChild(bunny);
        }

        requestAnimationFrame( animate );

        function animate() {

            requestAnimationFrame(animate);

            // render the stage
            renderer.render(stage);
        }

        function onDragStart(event)
        {
            // store a reference to the data
            // the reason for this is because of multitouch
            // we want to track the movement of this particular touch
            this.data = event.data;
            this.alpha = 0.5;
            this.dragging = true;
        }

        function onDragEnd()
        {
            this.alpha = 1;

            this.dragging = false;

            // set the interaction data to null
            this.data = null;
        }

        function onDragMove()
        {
            if (this.dragging)
            {
                var newPosition = this.data.getLocalPosition(this.parent);
                this.position.x = newPosition.x;
                this.position.y = newPosition.y;
            }
        }
    </script>

{% endblock %}